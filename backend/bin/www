#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app.js');
const debug = require('debug');
const http = require('http');
const mongoose = require('mongoose');
const { mongoURI: db } = require('../config/keys.js');

const serverLogger = debug('backend:server');
const dbLogger = debug('backend:mongodb');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '6000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Connect to Mongo database, then allow the server to listen for requests.
 */
mongoose
    .connect(db, { useNewUrlParser: true, useUnifiedTopology: true })
    .then(() => {
        dbLogger('Connected to MongoDB successfully');
        server.listen(port);
    })
    .catch(err => {
        serverLogger('MongoDB connection error:', err.message);
        process.exit(1); // Exit if the database connection fails
    });

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        return val;
    }

    if (port >= 0) {
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    serverLogger('Listening on ' + bind);
}

/**
 * Graceful shutdown
 */
process.on('SIGINT', () => {
    mongoose.connection.close(() => {
        console.log('MongoDB connection closed due to app termination');
        process.exit(0);
    });
});

process.on('SIGTERM', () => {
    mongoose.connection.close(() => {
        console.log('MongoDB connection closed due to app termination');
        process.exit(0);
    });
});
